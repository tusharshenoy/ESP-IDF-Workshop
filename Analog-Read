#include <stdio.h>
#include <stdlib.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/adc.h"
#include "esp_adc_cal.h"
#include "driver/gpio.h"
#include "esp_log.h"
#include "sdkconfig.h"

static const char *TAG = "ADC_LED_CONTROL";
static esp_adc_cal_characteristics_t adc1_chars;

#define BLINK_GPIO 2   // Built-in LED pin
#define ADC_THRESHOLD 1700  // Threshold for ADC value

void app_main(void)
{
    // Initialize ADC characteristics
    esp_adc_cal_characterize(ADC_UNIT_1, ADC_ATTEN_DB_11, ADC_WIDTH_BIT_DEFAULT, 0, &adc1_chars);

    // Configure ADC
    adc1_config_width(ADC_WIDTH_BIT_DEFAULT);
    adc1_config_channel_atten(ADC1_CHANNEL_4, ADC_ATTEN_DB_11);

    // Configure LED GPIO
    gpio_reset_pin(BLINK_GPIO);
    gpio_set_direction(BLINK_GPIO, GPIO_MODE_OUTPUT);

    while (1)
    {
        // Get raw ADC value
        int adc_value = adc1_get_raw(ADC1_CHANNEL_4);
        printf("ADC Value: %d\n", adc_value);

        // Check if ADC value exceeds the threshold
        if (adc_value > ADC_THRESHOLD)
        {
            // Turn on LED
            gpio_set_level(BLINK_GPIO, 1);
            ESP_LOGI(TAG, "ADC value is greater than %d. Turning the LED ON", ADC_THRESHOLD);
        }
        else
        {
            // Turn off LED
            gpio_set_level(BLINK_GPIO, 0);
            ESP_LOGI(TAG, "ADC value is less than %d. Turning the LED OFF", ADC_THRESHOLD);
        }

        // Delay for 500 ms
        vTaskDelay(500 / portTICK_PERIOD_MS);
    }
}
