#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_now.h"
#include "esp_event.h"
#include "nvs_flash.h"
#include "esp_log.h"

static const char *TAG = "ESP-NOW-RECEIVER";

// Define a data structure
typedef struct struct_message {
    char a[32];
} struct_message;

struct_message myData;
int message_count = 0; // Counter for the number of received messages

// Callback function called when data is received
void on_data_recv(const esp_now_recv_info_t *info, const uint8_t *data, int len) {
    memcpy(&myData, data, sizeof(myData));
    message_count++;
    ESP_LOGI(TAG, "Received message: %s", myData.a);
    ESP_LOGI(TAG, "Total messages received: %d", message_count);
}

void app_main(void) {
    // Initialize NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // Initialize Wi-Fi
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));
    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_start());

    // Initialize ESP-NOW
    ESP_ERROR_CHECK(esp_now_init());
    ESP_LOGI(TAG, "ESP-NOW Initialized");

    // Register the receive callback
    ESP_ERROR_CHECK(esp_now_register_recv_cb(on_data_recv));

    while (true) {
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
}
